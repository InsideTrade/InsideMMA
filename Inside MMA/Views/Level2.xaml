<controls:MetroWindow x:Class="Inside_MMA.Views.Level2"
        x:Name="Level2Window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:viewModels="clr-namespace:Inside_MMA.ViewModels"
        xmlns:dialogs="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
        mc:Ignorable="d"
        dialogs:DialogParticipation.Register="{Binding}"
        BorderBrush="{DynamicResource AccentColorBrush}"
        BorderThickness="1"
        Title="{Binding Seccode}" Width="250" SizeToContent="Height">
    <controls:MetroWindow.Resources>
        <viewModels:Leve2SizeComparer x:Key="Leve2SizeComparer"/>
        <viewModels:VisibilityConverter x:Key="VisibilityConverter"/>
        <viewModels:GradientBrushConverter x:Key="GradientBrushConverter"/>
        <CollectionViewSource x:Key="Source" IsLiveSortingRequested="True" Source="{Binding Level2Items, Mode=OneWay}">
            <CollectionViewSource.SortDescriptions>
                <componentModel:SortDescription PropertyName="Price" Direction="Descending"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="Source2" IsLiveSortingRequested="True" Source="{Binding Level2Items, Mode=OneWay}">
            <CollectionViewSource.SortDescriptions>
                <componentModel:SortDescription PropertyName="Price" Direction="Ascending"/>
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <Style TargetType="{x:Type dialogs:MessageDialog}" BasedOn="{StaticResource NewCustomMessageDialogStyle}" />
        <!--<LinearGradientBrush x:Key="Brush" StartPoint="0,0" EndPoint="1,0" Opacity="0.6">
            <GradientStop Color="DarkSlateGray" Offset="{Binding Percentage}" />
            <GradientStop Color="Transparent" Offset="{Binding Percentage}"></GradientStop>
        </LinearGradientBrush>-->
        <Style x:Key="ColumnInCell" TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="0.5"/>
            <Setter Property="Background" Value="{Binding Percentage, Converter={StaticResource GradientBrushConverter}}"/>
            <!--<Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" Opacity="0.6">
                        <GradientStop Color="DarkSlateGray" Offset="{Binding Percentage}" />
                        <GradientStop Color="Transparent" Offset="{Binding Percentage}"></GradientStop>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>-->
            <Setter Property="TextBlock.TextAlignment" Value="Right"/>
            <Style.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource Leve2SizeComparer}">
                            <Binding Path="Quantity"/>
                            <Binding Source="{x:Reference dummyElement}" Path="DataContext.AlertSize" />
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}"></Setter>
                </DataTrigger>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource Leve2SizeComparer}">
                            <Binding Path="Quantity"/>
                            <Binding Source="{x:Reference dummyElement}" Path="DataContext.AlertTwoSize" />
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="Foreground" Value="DodgerBlue">
                        </Setter>
                </DataTrigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Foreground" Value="White"></Setter>
                    <!--<Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" Opacity="0.6">
                                <GradientStop Color="DarkSlateGray" Offset="{Binding Percentage}" />
                                <GradientStop Color="Transparent" Offset="{Binding Percentage}"></GradientStop>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>-->
                    <Setter Property="Background" Value="{Binding Percentage, Converter={StaticResource GradientBrushConverter}}"></Setter>
                    <Setter Property="BorderBrush" Value="Transparent"></Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </controls:MetroWindow.Resources>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding Closing}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <!--Visibility="{Binding WindowAvailabilityManager.TradingEnabled, Converter={StaticResource VisibilityConverter}}">-->
            <Rectangle Width="10" Height="15" Fill="White" Visibility="Collapsed">
                <Rectangle.OpacityMask>
                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_cursor_default_outline}"/>
                </Rectangle.OpacityMask>
            </Rectangle>
            <Rectangle Width="10" Height="15" Fill="White" Visibility="{Binding UseCredit, Converter={StaticResource VisibilityConverter}}">
                <Rectangle.OpacityMask>
                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_currency_dollar}"/>
                </Rectangle.OpacityMask>
            </Rectangle>
            <ToggleButton Width="30" IsChecked="{Binding IsAnchorEnabled}" Height="30" Style="{DynamicResource MetroCircleToggleButtonStyle}">
                <Rectangle Width="15" Height="15" 
                           Fill="{Binding Path=Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_anchor}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </ToggleButton>

        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>
    <Grid Name="Grid">
        <Grid.RowDefinitions>
            <RowDefinition Height="30"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <FrameworkElement x:Name="dummyElement"/>
        <Canvas controls:VisibilityHelper.IsVisible="{Binding WindowAvailabilityManager.SettingsEnabled}" Grid.Row="0" x:Name="Canvas" Height="{Binding ActualHeight, ElementName=Expander}" Background="{DynamicResource WindowBackgroundBrush}" ZIndex="100" Margin="0, 0, 0, 20">
            <Expander  x:Name="Expander" ExpandDirection="Down" MaxHeight="{Binding ElementName=Grid, Path=ActualHeight}" Width="{Binding ActualWidth, ElementName=Canvas}" Background="{DynamicResource WindowBackgroundBrush}" MouseLeave="Expander_OnMouseLeave" >
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                    <DockPanel Margin="0 0 0 10">
                        <Button MaxHeight="40" ToolTip="View help" Click="ViewHelp" BorderThickness="0" Background="{DynamicResource WindowBackgroundBrush}">
                            <Rectangle x:Name="Rectangle" Width="20"
                                   Height="20"
                                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                                <Rectangle.OpacityMask>
                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_book_perspective_help}" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button>
                        <StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="0, 0, 0, 10">
                                <TextBlock TextWrapping="WrapWithOverflow" FontSize="16" VerticalAlignment="Center" TextAlignment="Right" Margin="0, 0, 10, 0">Select Level2 type:</TextBlock>
                                <ComboBox x:Name="TypeSelector" SelectedItem="{Binding SelectedItem, Mode=OneWayToSource}" HorizontalAlignment="Right">
                                    <ComboBoxItem IsSelected="True" Selected="SelectedRus">RUS</ComboBoxItem>
                                    <ComboBoxItem Selected="SelectedUsa">USA</ComboBoxItem>
                                </ComboBox>
                            </StackPanel>
                            <CheckBox x:Name="OneClickTrade" FontSize="16" Margin="0 0 10 10" HorizontalAlignment="Right" Content="One-click trade"
                                  IsEnabled="{Binding WindowAvailabilityManager.TradingEnabled}">
                                <CheckBox.Style>
                                    <Style TargetType="CheckBox" BasedOn="{StaticResource WhiteCheckBox}">
                                        <Setter Property="FlowDirection" Value="RightToLeft" />
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <ContentControl FlowDirection="LeftToRight" Content="{Binding}" />
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding WindowAvailabilityManager.TradingEnabled}" Value="False">
                                                <Setter Property="IsChecked" Value="False"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </CheckBox.Style>
                            </CheckBox>
                            <CheckBox FontSize="16" Margin="0 0 10 10" HorizontalAlignment="Right" Content="Use credit" IsChecked="{Binding UseCredit}">
                                <CheckBox.Style>
                                    <Style TargetType="CheckBox" BasedOn="{StaticResource WhiteCheckBox}">
                                        <Setter Property="FlowDirection" Value="RightToLeft" />
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <ContentControl FlowDirection="LeftToRight" Content="{Binding}" />
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </CheckBox.Style>
                            </CheckBox>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 10 10">
                                <TextBlock FontSize="16" VerticalAlignment="Center" Margin="0 0 5 0">Trade size:</TextBlock>
                                <controls:NumericUpDown VerticalAlignment="Center" HorizontalAlignment="Right" HasDecimals="False" Minimum="1" Value="{Binding TradeSize}"></controls:NumericUpDown>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 10 10">
                                <TextBlock FontSize="16" VerticalAlignment="Center" Margin="0 0 5 0">Alert size 1:</TextBlock>
                                <controls:NumericUpDown Name="AlertSizeSetter" VerticalAlignment="Center" HorizontalAlignment="Right" Minimum="1" Value="{Binding AlertSize}"></controls:NumericUpDown>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0 0 10 10">
                                <TextBlock FontSize="16" VerticalAlignment="Center" Margin="0 0 5 0">Alert size 2:</TextBlock>
                                <controls:NumericUpDown Name="AlertTwoSizeSetter" VerticalAlignment="Center" HorizontalAlignment="Right" Minimum="{Binding AlertSize}" Value="{Binding AlertTwoSize}"></controls:NumericUpDown>
                            </StackPanel>
                        </StackPanel>
                    </DockPanel>
                </ScrollViewer>
            </Expander>
        </Canvas>
        <Grid Grid.Row="1" x:Name="Level2Grid" Focusable="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DataGrid Padding="0" x:Name="Level2Buy" SelectedItem="{Binding SelectedData}" SelectionMode="Single" SelectionUnit="FullRow" GridLinesVisibility="Horizontal" VerticalAlignment="Stretch"  AutoGenerateColumns="False" ItemsSource="{Binding Source={StaticResource Source}}" CanUserAddRows="False" HeadersVisibility="None"
                      VirtualizingStackPanel.IsVirtualizing="True" 
                      VirtualizingStackPanel.VirtualizationMode="Recycling" 
                      ScrollViewer.CanContentScroll="True" HorizontalScrollBarVisibility="Disabled">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Setter Property="TextBlock.TextAlignment" Value="Center" />
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="BorderBrush" Value="DarkGray"/>
                        <Setter Property="BorderThickness" Value="0.3"></Setter>
                        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="RowClicked"></EventSetter>
                        <EventSetter Event="MouseEnter" Handler="MouseEnterRow"></EventSetter>
                        <!--<EventSetter Event="PreviewMouseRightButtonDown" Handler="RightMouseOnRow"></EventSetter>-->
                        <!--<EventSetter Event="MouseLeave" Handler="MouseLeaveRow"></EventSetter>-->
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding BuySell}" Value="sell">
                                <Setter Property="Foreground" Value="#FF5252"></Setter>
                                <Setter Property="Visibility" Value="{Binding ElementName=Level2Window, Path=GridVisibility, Mode=OneWay}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding BuySell}" Value="buy">
                                <Setter Property="Foreground" Value="Green"></Setter>
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="LightGray"></Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <!--<Setter Property="BorderBrush" Value="DarkGray"/>-->
                        <Setter Property="BorderThickness" Value="0.3"/>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="White"></Setter>
                                <Setter Property="Background" Value="Transparent"></Setter>
                                <Setter Property="BorderBrush" Value="Transparent"></Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn x:Name="ColumnSource1" FontSize="13" FontWeight="Bold"
                                        Binding="{Binding Source, Mode=OneWay}" Width="*"/>
                    <DataGridTextColumn FontSize="13" FontWeight="Bold"
                      Binding="{Binding Price, Mode=OneWay}" Width="*"/>
                    <DataGridTextColumn FontSize="13" FontWeight="Bold" CellStyle="{StaticResource ColumnInCell}"
                      Binding="{Binding Quantity, Mode=OneWay}" Width="*" />
                </DataGrid.Columns>
                <DataGrid.ContextMenu>
                    <ContextMenu controls:VisibilityHelper.IsVisible="{Binding WindowAvailabilityManager.SettingsEnabled}">
                        <MenuItem Header="Place order" Command="{Binding PlaceOrderCommand}" IsEnabled="{Binding WindowAvailabilityManager.TradingEnabled}"/>
                        <MenuItem Header="Place stoporder" Command="{Binding PlaceStoporderCommand}" IsEnabled="{Binding WindowAvailabilityManager.TradingEnabled}"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
            </DataGrid>

            <DataGrid Padding="0" x:Name="Level2Sell" Visibility="Collapsed" 
                      SelectedItem="{Binding SelectedData}" SelectionMode="Single" SelectionUnit="FullRow" 
                      GridLinesVisibility="Horizontal" VerticalAlignment="Stretch"  
                      AutoGenerateColumns="False" 
                      ItemsSource="{Binding Source={StaticResource Source2}}" 
                      CanUserAddRows="False" 
                      HeadersVisibility="None"
                      VirtualizingStackPanel.IsVirtualizing="True" 
                      VirtualizingStackPanel.VirtualizationMode="Recycling" 
                      ScrollViewer.CanContentScroll="True"
                      HorizontalScrollBarVisibility="Disabled">
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Setter Property="TextBlock.TextAlignment" Value="Center" />
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="BorderBrush" Value="DarkGray"/>
                        <Setter Property="BorderThickness" Value="0.3"></Setter>
                        <EventSetter Event="PreviewMouseLeftButtonDown" Handler="RowClicked"></EventSetter>
                        <EventSetter Event="MouseEnter" Handler="MouseEnterRow"></EventSetter>
                        <!--<EventSetter Event="PreviewMouseRightButtonDown" Handler="RightMouseOnRow"></EventSetter>-->
                        <!--<EventSetter Event="MouseLeave" Handler="MouseLeaveRow"></EventSetter>-->
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding BuySell}" Value="sell">
                                <Setter Property="Foreground" Value="#FF5252"></Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding BuySell}" Value="buy">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="LightGray"></Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <!--<Setter Property="BorderBrush" Value="DarkGray"/>-->
                        <Setter Property="BorderThickness" Value="0.3"/>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="White"></Setter>
                                <Setter Property="Background" Value="Transparent"></Setter>
                                <Setter Property="BorderBrush" Value="Transparent"></Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn x:Name="ColumnSource2" FontSize="13" FontWeight="Bold"
                                        Binding="{Binding Source, Mode=OneWay}" Width="*"/>
                    <DataGridTextColumn FontSize="13" FontWeight="Bold"
                      Binding="{Binding Price, Mode=OneWay}" Width="*"/>
                    <DataGridTextColumn FontSize="13" FontWeight="Bold" CellStyle="{StaticResource ColumnInCell}"
                      Binding="{Binding Quantity, Mode=OneWay}" Width="*"/>
                </DataGrid.Columns>
                <DataGrid.ContextMenu>
                    <ContextMenu controls:VisibilityHelper.IsVisible="{Binding WindowAvailabilityManager.SettingsEnabled}">
                        <MenuItem Header="Place order" Command="{Binding PlaceOrderCommand}" IsEnabled="{Binding WindowAvailabilityManager.TradingEnabled}"/>
                        <MenuItem Header="Place stoporder" Command="{Binding PlaceStoporderCommand}" IsEnabled="{Binding WindowAvailabilityManager.TradingEnabled}"/>
                    </ContextMenu>
                </DataGrid.ContextMenu>
            </DataGrid>

        </Grid>
    </Grid>
</controls:MetroWindow>